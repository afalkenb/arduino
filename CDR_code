double kp =;
double ki =;
double kd =;

unsigned long currentTime, previousTime;
double elapsedTime;
double error;
double lastError;
double input, output, setPoint;
double cumError, rateError
const int buttonPin = 3;
double altimeter
double tension
double inHeight
double encoder

void setup() {
  // put your setup code here, to run once:
  setPoint = 0;
  pinMode(buttonPin, INPUT)
  pinMode(altimeter, INPUT)
  pinMode(tension, INPUT)
  pinMode(encoder, INPUT)
  pinMode(ldr, INPUT
  printf("What height is your tower?")
  scanf("Please input tower height: %f", inHeight)
  
}

void loop() {
  // put your main code here, to run repeatedly:
  int buttonState;
  double altimeter;
  double encoder;
  buttonState = digitalRead(buttonPin)
  altimeter = analogRead(altimeter)
  encoder = analogRead(encoder)
  
  if (buttonPin == LOW)
  {
    if (altimeter < inHeight && encoder < inHeight)
    {
      tight = tightenFunction();
      output_left = climbingFunction_left();
      output_right = climbingFunction_right():
      spray = sprayFunction();
      delay(100)
      analogWrite(3, output_left);
      analogWrite(5, output_right);
    }
    else if (altimeter >= inHeight || encoder >= inHeight)
    {
      sprayDown()
    }
  }
}

double tightenFunction(){
  input = analogRead(//pin#)
  tension = analogRead(tension)
  if tension < 2000
  {
    output = tighten(tension)
    return output
  } 
  else if tension > 2000;
  {
    output = loosen(tension)
    return output
  }
  else
  {
    return 0
  } 

}

double climbingFunction_left(){
    input = analogRead(//pin#);
    output = computePID_left(input);
    return output
}

double computePID_left(double inp){
  currentTime = millis();
  elapsedTime = (double)(currentTime - previousTime);
  error = setPoint - inp;
  cumError += error*elapsedTime;
  rateError = (error-lastError)/elapsedTime;

  double out = kp*error + ki*cumError + kd*rateError;
  lastError = error;
  previousTime = currentTime;

  return out;
}

double climbingFunction_right(){
    input = analogRead(//pin#);
    output = computePID_right(input);
    return output
}

double computePID_right(double inp){
  currentTime = millis();
  elapsedTime = (double)(currentTime - previousTime);
  error = setPoint - inp;
  cumError += error*elapsedTime;
  rateError = (error-lastError)/elapsedTime;

  double out = kp*error + ki*cumError + kd*rateError;
  lastError = error;
  previousTime = currentTime;

  return out;
}

double tighten(){
  
}

double loosen(){

}
double sprayFunction(){
  
}
