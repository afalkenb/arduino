unsigned long currentTime, previousTime;
double elapsedTime;
double error;
double lastError;
double input, output, setPoint;
double cumError, rateError;
double proximity //proximity sensor
double tension //tension sensor reading
double inHeight //input height
double encoderL //Left Encoder Reading
double encoderR //Right Encoder Reading

void setup() {
  // put your setup code here, to run once:
  setPoint = 0;
  pinMode(proximity, INPUT)
  pinMode(tension, INPUT)
  pinMode(encoder_L, INPUT)
  pinMode(encoder_R, INPUT
  pinMode(ldr_L, INPUT)
  pinMode(ldr_R, INPUT)

  motor1.drive() //input voltage for left
  motor2.drive() //input voltage for right
}

void loop() {
  // put your main code here, to run repeatedly:
  double altimeter;
  double encoder_L;
  double encoder_R;

  encoderL = analogRead(encoderL) //reads left encoder
  encoderR = analogRead(encoderR) //reads right encoder
  proximity = analogRead(proximity) //reads proximity sensor

  encoder_L = encoderL/24.446; //converts encoder count to distance in inches
  encoder_R = encoderR/24.446; //converts encoder count to distance in inches
  
  if (proximity > distance && (encoder_L < inHeight || encoder_R < inHeight))
  // checks to see if the device is close to the top of the turbine
  {
    tight = tightenFunction();
    output_left = climbingFunction_left(proximity, encoder_distL);
    output_right = climbingFunction_right(proximity, encoder_distR):
    analogWrite(3, output_left);
    analogWrite(5, output_right);
  }
  else if (proximity <= distance && (encoder_L >= inHeight || encoder_R >= inHeight)
  {
      spraydown()
  }
}

double climbingFunction_left(double altimeter, double encoderL){
    if altimeter < inHeight && encoder < inHeight
      input = analogRead(//pin#);
      output = computePID_left(input);
      return output
    else
    {
      return 0
    }
}

double computePID_left(double inp){
  currentTime = millis();
  elapsedTime = (double)(currentTime - previousTime);
  error = setPoint - inp;
  cumError += error*elapsedTime;
  rateError = (error-lastError)/elapsedTime;

  double out = kp*error + ki*cumError + kd*rateError;
  lastError = error;
  previousTime = currentTime;

  return out;
}

double climbingFunction_right(double altimeter, double encoderR){
    if altimeter < inHeight && encoder < inHeight
      input = analogRead(//pin#);
      output = computePID_left(input);
      return output
    else
    {
      return 0
    }
}

double computePID_right(double inp){
  currentTime = millis();
  elapsedTime = (double)(currentTime - previousTime);
  error = setPoint - inp;
  cumError += error*elapsedTime;
  rateError = (error-lastError)/elapsedTime;

  double out = kp*error + ki*cumError + kd*rateError;
  lastError = error;
  previousTime = currentTime;

  return out;
}
